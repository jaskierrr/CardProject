// Code generated by MockGen. DO NOT EDIT.
// Source: ./controller.go

// Package mock is a generated GoMock package.
package mock

import (
	models "card-project/models"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pgconn "github.com/jackc/pgx/v5/pgconn"
)

// MockController is a mock of Controller interface.
type MockController struct {
	ctrl     *gomock.Controller
	recorder *MockControllerMockRecorder
}

// MockControllerMockRecorder is the mock recorder for MockController.
type MockControllerMockRecorder struct {
	mock *MockController
}

// NewMockController creates a new mock instance.
func NewMockController(ctrl *gomock.Controller) *MockController {
	mock := &MockController{ctrl: ctrl}
	mock.recorder = &MockControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockController) EXPECT() *MockControllerMockRecorder {
	return m.recorder
}

// DeleteCardID mocks base method.
func (m *MockController) DeleteCardID(ctx context.Context, id int) (pgconn.CommandTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCardID", ctx, id)
	ret0, _ := ret[0].(pgconn.CommandTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCardID indicates an expected call of DeleteCardID.
func (mr *MockControllerMockRecorder) DeleteCardID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCardID", reflect.TypeOf((*MockController)(nil).DeleteCardID), ctx, id)
}

// DeleteUserID mocks base method.
func (m *MockController) DeleteUserID(ctx context.Context, id int) (pgconn.CommandTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserID", ctx, id)
	ret0, _ := ret[0].(pgconn.CommandTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUserID indicates an expected call of DeleteUserID.
func (mr *MockControllerMockRecorder) DeleteUserID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserID", reflect.TypeOf((*MockController)(nil).DeleteUserID), ctx, id)
}

// GetCardID mocks base method.
func (m *MockController) GetCardID(ctx context.Context, id int) (models.Card, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCardID", ctx, id)
	ret0, _ := ret[0].(models.Card)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCardID indicates an expected call of GetCardID.
func (mr *MockControllerMockRecorder) GetCardID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCardID", reflect.TypeOf((*MockController)(nil).GetCardID), ctx, id)
}

// GetCards mocks base method.
func (m *MockController) GetCards(ctx context.Context) ([]*models.Card, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCards", ctx)
	ret0, _ := ret[0].([]*models.Card)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCards indicates an expected call of GetCards.
func (mr *MockControllerMockRecorder) GetCards(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCards", reflect.TypeOf((*MockController)(nil).GetCards), ctx)
}

// GetUserID mocks base method.
func (m *MockController) GetUserID(ctx context.Context, id int) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserID", ctx, id)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserID indicates an expected call of GetUserID.
func (mr *MockControllerMockRecorder) GetUserID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserID", reflect.TypeOf((*MockController)(nil).GetUserID), ctx, id)
}

// GetUsers mocks base method.
func (m *MockController) GetUsers(ctx context.Context) ([]*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", ctx)
	ret0, _ := ret[0].([]*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockControllerMockRecorder) GetUsers(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockController)(nil).GetUsers), ctx)
}

// PostCard mocks base method.
func (m *MockController) PostCard(ctx context.Context, user models.NewCard) (models.Card, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostCard", ctx, user)
	ret0, _ := ret[0].(models.Card)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostCard indicates an expected call of PostCard.
func (mr *MockControllerMockRecorder) PostCard(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostCard", reflect.TypeOf((*MockController)(nil).PostCard), ctx, user)
}

// PostUser mocks base method.
func (m *MockController) PostUser(ctx context.Context, user models.NewUser) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostUser", ctx, user)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostUser indicates an expected call of PostUser.
func (mr *MockControllerMockRecorder) PostUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostUser", reflect.TypeOf((*MockController)(nil).PostUser), ctx, user)
}
